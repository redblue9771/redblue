[{"uri":"https://redblue.ga/spirits/develop/complexity","tags":[],"content":" 计算机科学 中 的 复杂度 这里 的 「 复杂度 」The Algorithm Complexity 是 指 编程 计算 中 的 算法 复杂度 。 它 包括 「 空间 复杂度 」 和 「 时间 复杂度 」。 空间 复杂度 「Time Complexity」 是 用来 衡量 执行 这个 算法 所 消耗 的 内存大小 时间 复杂度 「Space Complexity」 是 用来 衡量 执行 这个 算法 所 需要 的 时间 长度 复杂度 是 算法 的 一个 非常 重要 的 指标 ， 时间 和 空间 是 计算机 资源 最 重要 的 参数 ， 因此 占用 资源 低 是 算法 的 终极目标 ， 这 直接 影响 了 一个 程序 的 质量 和 效率 ， 时间 复杂度 越 低 ， 执行 效率 就 越 高 。 你 可以 在 「 在线 评测 」Online Judge 这 类 网站 中 看到 它 的 身影 。 其中 加入 了 时间 和 空间 的 限制 。 参见  T^T Online Judge（www.fjutacm.com） 的 截图 因此 选择 合适 的 算法 和 优化 算法 来 降低 复杂度 也 是 ACM – ICPC「 国际 大学生 程序设计 竞赛 」 的 核心 竞争力 之一 。 复杂度 分析 分析 时间 复杂度 之前 ， 我们 先 来 弄懂 一个 概念 。 在 数学 中 ， 大 O 符号 「Big O notation」（ 大写字母 O 不是 零 0） 是 用于 描述 函数 渐 进行 为 的 数学 符号 。 渐 进行 为 ？！ 别 慌 ， 看 我 慢慢 给 你 扯 嘿 ， 你 知道 最 基本 的 运算 时 是 什么 嘛 ？？ 不用 怀疑 ， 就是 加减乘除 呗 ， 当然 你 也 可以 说 加减 甚至 是 加法 运算 。 那么 我们 来说 说 加法 如何 ~ 假设 现在 要 你 从 1 累加 到 100 即 很 容易 吧 ， 不 考虑 捷径 ， 我们 暴力 求解 计算 100 次 ， 如果 是 加 到 1 000 000 呢 ？ 更 多 呢 ？ 嗯 ， 现在 我们 求 1 到 n 的 和 （n>1,n∈Z） 即 这个 得出 结果 的 过程 即 「 算法 」Algorithm。 这个 求和 算法 总共 计算 了 n 次 ，n 次 计算 其实 就是 「 复杂度 」Complexity。 容易 得出 复杂度 为 线性 函数 ， 我们 把 它 记 作 O(n)， 称 「 线性 复杂度 」Linear Complexity。 是不是 很 简单 ， 嘿嘿 ， 别 走 ， 还有 ~ 写 个 代码 吧 ~int start = 1, end = n, result = 0;for (int i = start; i ，2n+1 是不是 就 可以 渐进 为 2n 了 ~ 这 算是 一种 最差 的 情况 ， 除了 最差 还有 平均 、 最优 ， 最 常用 最差 ， 也 就是 做 最 坏 的 打算 。 还有 就是 我们 只 关心 复杂度 最 重要 的 部 不 考虑 细节 带来 的 影响 ， 比如 start=1，i++。 事实上 ， 考虑 了 结果 也 一样 ， 那么 就 只 关心 复杂度 最 重要 的 部分 就 好 了 。 那么 2n 怎么 变成 n 的 呢 ？？？？？？？？？ 这个 …… 我 不 知道 ~ 嘿嘿 ， 皮 一下 很 开心 ~ 其实 大 O 符号 是 一种 算法 复杂度 的 「 相对 」 表示 方式 。 相对 ， 就是说 在 数据量 的 增加 的 同时 耗时 也 在 增加 ， 而 描述 这个 增长 关系 的 函数 就是 O 本身 。 既然 O(3n) 和 O(n) 都 是 表示 线性 复杂度 ， 为什么 不用 更 具有 一般性 的 O(n) 作为 代表 呢 ? 这 跟 分式 化简 一个 理 儿 。 在 描述 算法 复杂度 的 时候 并 不是 具体 的 描述 这个 复杂度 ， 而是 描述 它 属于 哪 类 复杂度 ， 是 抽象 的 数量级 。 除了 线性 复杂度 ， 还有 常数 复杂度 、 平方 复杂度 、 对数 复杂度 、 组合 复杂度 等 ……* 注意 ： 由于 使用 的 编程语言 不尽相同 ， 甚至 相同 语言 不同 版本 ， 不同 编译器 ， 不同 平台 都 可能 有 非常 大 的 「 空间 」 占用 差异 ， 因此 这里 的 计算 不 讨论 「 空间 复杂度 」。 相信 有 一定 计算机 基础 的 同学 参阅 官方 文档 都 可以 轻松 的 计算 「 空间 复杂度 」， 它 也 是 类似 时间 复杂度 的 ， 确实 很 复杂 …… 扩展 加深 阅读  http://blog.jobbole.com/55184/","title":"「 复杂度 」The Algorithm Complexity","oriTitle":"「复杂度」The Algorithm Complexity"},{"uri":"https://redblue.ga/spirits/develop/csdn-noad","tags":[],"content":"+++date = \"2018-08-13T16:39:45+08:00\"description = \"\"slug = \"\"title = \" 极短 「CSS3」 代码 去  CSDN  广告 \"[info]    name = \" 赤 琦 \"    url = \"\"+++ 关于 CSDN 不得不 说 CSDN 博客 页 上 聚集 了 大量 的 知识 内容 ， 可是 深恶痛绝 的 是 满屏 的 广告 让 你 不能 专注 于博客 内容 ， 多 的 不 说 ， 一张 图 告诉 你 它 的 广告 有 多少 一个 连 搜索引擎 检索 的 SEO 关键 都 是 广告词 ！ 吃惊 ！！！ 知 乎 关于 CSDN 的 讨伐 针对 博客 详情页 其实 有 不少 的 替代 方案 ： 掘金 ，segmentfault 等 都 是 高质量 的 ， 可是 一些 比较 偏 的 内容 确实 能 在 CSDN 中 快速 检索 得到 ， 特别 是 经常 百度 一下 全 是 CSDN 的 链接 （： 汗颜 -， 所以 是 免不了 看 它 了 ， 来 吧 ， 动手 去 广告 原理 利用 插件 在 加载 完毕 的 页面 中 加入 定制 样式 以及 脚本 内容 在 Chrome 商店 检索 到 了 stylish 和 stylus 用于 Custom CSS 的 神器 （ 油 猴 脚本 也 可以 哦 ， 转为 JavaScript 就 好 了 ） 当然 不仅仅 用于 Chrome， 上述 插件 在 FireFox、Opera、Safari、Edge 以及 其他 WebKit 浏览器 均 有 不同 程度 的 支持 ， 总之 就是 很 方便 了 。P.S.: 手机 端 也 有 ， 安 卓 Yandex 等 ， 不过 我 的 代码 适用 于 PC 端 ， 自行 移植 和 修改 定制 解决 和 实现 https://userstyles.org 里面 有 非常 多 已经 定制 好 的 代码 ， 可是 我 都 不 满意 ， 他们 均 不能 很 好 的 除去 广告 ， 于是 我 就 打算 自己 写 一般 的 隐藏 HTML 元素 大家 想到 的 选择 都 是 比较 常见 的 ， 通过 标签 、 样式 等 选中 后 隐藏 。 可是 这样 做 的 代价 很大 ： 一个 网页 内 的 元素 太 多 造成 选取 困难 ， 甚至 还有 动态 改变 的 内容 于是 我 就 想 能 不能 换 个 思路 ： 既然 我 不能 知道 每个 广告 的 位置 ， 那么 我 就 把 除了 文章 的 主要 内容 外 的 元素 都 隐藏 ， 但是 很快 我 就 遇到 了 难题 ，CSS 好像 没 这样 的 选择器 ？ 于是 打开 CSS 选择器 文档 发现 了  :not()  选择器 ， 也 就是 除了 的 意思 。    div:not(p)// 这个 意思 就是 div 下面 的 非 p 的 所有 标签 可是 使用 中 发现 要 除去 多个 ， 习惯 测试 用 逗号 分隔 无效 （ 也 就是 有 顺序 ， 前面 的 隐藏 了 就 选 不到 了 ） 于是 又 疯狂 的 百度 嘿嘿 ， 原来  :not()  函数 是 可以 并列 的 ， 可以 说 CSS3 真的 是 好 用 ， 期待 下 下一代 会 有 更 优秀 的 选择器     div:not(p):not(a)// 这个 意思 就是 div 下面 的 除了 p 和 a 以外 的 所有 标签 有 了 这个 就 好办 了 仅 保留 文章 主要 文字 和 相关 文章 ， 其他 可 自行 扩展 `// 首先 去除 所有 文章 页 以外 的 内容 body{    background:url() #f2f2f2!important;}body>:not(#mainBox){    display:none!important;}// 再 将 文章 内 文字 部分 保留 （ 相当于 去 aside 标签 ）#mainBox>:not(main){    display:none!important;}// 去除 评论 以及 部分 广告 main>:not(.blog-content-box):not(.recommend-box){        display:none!important;}// 去除 相关 文章 内 的 广告 .recommend-box>:not(.type_blog){            display:none!important;}// 对 文章 居中 显示 main{    position:absolute;    top:3em;    left:50%;    transform:translate3d(-50%,0,0)}` 效果图 不止 于 CSDN 和 去 广告 现在 你 完全 可以 使用 CSS 和 JavaScript 定制 任何 网站 的 样式 ， 无广告 百度 ， 任何 主题 的 bilibili， 享 你 所 想 ！ 扩展 阅读 ：CSS3 选择器 "},{"uri":"https://redblue.ga/spirits/develop/mvvm","tags":[],"content":" 什么 是  MVVM？MVVM  是  Model-View-ViewModel  的 简写 。 它 最早 是 由 微软 （Microsoft） 为 分离 模型 （Model） 和 视图 （View） 而 提出 来 的  WPF  技术 结合  MVP  模式 演变 而 来 。MVVM  的 通信 方向 以往  MVC  模式 的 操作 方式 是 获取  DOM  对象 ， 再 对  DOM  对象 进行 变化 。 举 个 栗子 ：HTML  代码     redblue 我们 采用  JQury  对 它 的 内容 操作 为     $(\".test'\").text(\"spirit.redblue.cf\"); 是 的 ， 我 相信 你 非常容易 理解 。 那么 采用  MVVM  要 怎样 操作 尼 ？ 同样 对于 刚刚 的  HTML  源码     {{obj.name}}    // 这里 必须 申明 ： 假设 {{ 数据 名 }} 这样 是 获取数据 内容 并且 定义 有 ：    // var obj = {    //    name:\"redblue\"    //}    // 那么 ， 现在 这 句 话 就 等同于 redblue 对于 修改 这个 我们 很 容易 就 这样 做     obj.name = \"spirit.redblue.cf\" 这时候 在 没有 获取  DOM  对象 的 情况 下 就 对  View  视图 重新 渲染 。 这 也 就是  ViewModel  所 起到 的 中间 作用 ， 即  Model  可以 通过 影响  ViewModel  来 间接 变化  View。 这 就是 其 最大 的 区别 。 当然 ， 视图 （View） 可以 独立 于  Model  变化 和 修改 ， 一个  ViewModel  可以 绑定 到 不同 的  View  上 ， 当  View  变化 的 时候  Model  可以 不变 ， 当  Model  变化 的 时候  View  也 可以 不变 ， 也 就是 低 耦合 性 。","title":"「 小 程序 」 简述  MVVM  模式 ","oriTitle":"「小程序」简述 MVVM 模式"},{"uri":"https://redblue.ga/spirits/develop/visual-studio-code-go","tags":[],"content":"+++date = \"2018-08-10T13:46:11+08:00\"title = \"Visual Studio Code  中 的 「Go 配置 」\"slug = \"visual-studio-code-for-go\"[info]    name = \" 赤 琦 \"    url = \"\"+++ 发现 问题 > 使用 静态 博客 开发 后 Webstrom 对于 {{.SIte}} 这 类 数据 绑定 的 符号 的 格式化 简直 惨不忍睹 ， 而且 每次 启动 对于 我 的 电脑 负担 真的 很大 ， 于是 转向 使用 Visual Studio Code， 不得不 说 对于 前端 这种 简单 的 编辑 使用 Visual Studio Code 真的 是 极好 ， 良好 的 生态 扩展 和 跨平台 使用 、 还 免费 、 极速 、 格式化 不 乱 …… 一秒 成为 真 爱 粉 ！JetBrains 全家 桶 由 Visual Studio Code 完美 替代 （ 当然 毕竟 前者 是 IDE， 本身 就 大材小用 了 ） 使用 Go 语言 需要 安装 Go for Visual Studio Code 插件 ， 是 Microsoft 提供 语言 支持 包 ， 安装 完 后 重新 加载 （ 请 先 安装 golang 的 环境 ） 初次 使用 GO 需要 安装 相关 依赖 ， 但 由于 网络 或者 是 一些 依赖 没有 安装 会 造成 安装 失败 ， 失败 输出 如下 ：`Installing 14 tools at C:/User/RedBlue/go/bingocodegopkgsgo-outlinego-symbolsgurugorenamegomodifytagsgoplayimplgodefgoreturnsgolintgotestsdlvInstalling github.com/nsf/gocode SUCCEEDEDInstalling github.com/uudashr/gopkgs/cmd/gopkgs SUCCEEDEDInstalling github.com/ramya-rao-a/go-outline FAILEDInstalling github.com/acroca/go-symbols SUCCEEDEDInstalling golang.org/x/tools/cmd/guru FAILEDInstalling golang.org/x/tools/cmd/gorename FAILEDInstalling github.com/fatih/gomodifytags SUCCEEDEDnstalling github.com/haya14busa/goplay/cmd/goplay SUCCEEDEDInstalling github.com/josharian/impl FAILEDInstalling github.com/rogpeppe/godef SUCCEEDEDInstalling sourcegraph.com/sqs/goreturns FAILEDInstalling github.com/golang/lint/golint FAILEDInstalling github.com/cweill/gotests/... SUCCEEDEDInstalling github.com/derekparker/delve/cmd/dlv SUCCEEDED6 tools failed to install.` 解决 打开 你 的 GOPATH， 我 的 目录 C:/Users/RedBlue/go     目录 下 有 bin、src 文件 打开 /src/github.com 其实 在 这 目录 你 会 发现 你 安装 失败 的 其实 都 已经 下载 好 了 ， 是 真的 安装 失败 ， 而 不是 因为 网络 问题 。     当然 如果 你 是因为 网络 问题 ， 你 可以 这样 做 ： 复制 类似 这样 的 Installing github.com/nsf/gocode FAILED 的 github.com/nsf/gocode 到 浏览器 访问 ， 然后 git clone 下来 ， 放到 src 下 同样 的 目录 ， 像 这样 /src/github.com/nsf/gocode 再 执行 安装 （ 后面 有 命令 ） 就 可以 了 ， 对于 golang.org 这种 （golang.org/x/tools/cmd/guru FAILED） 同样 的 可以 到 「GitHub」golang 里面 获取 tools 仓库      下面 我 就 讲 具体 的 tools 怎么 安装 ：     如果 /src/github.com/golang 里面 已经 存在 tools 文件夹 那么 就 可以 直接 复制到 /src/golang.org/x 文件夹 。 如果 不 存在 的 需要 在 golang 文件夹 执行     `Bash    git clone https://github.com/golang/tools.git tools    `     你 会 获得 tools 文件夹 ， 将 整个 文件夹 复制到 /src/golang.org/x 目录 下 回到 GOPAHT 执行 安装 命令 go install +  插件 名称 ， 例如 安装 golang.org/x/tools/cmd/guru    `Bash    go install golang.org/x/tools/cmd/guru    `     等待 安装 完成 ， 即可      其他 插件 按照 此 方法 找 对 目录 ， 执行 git clone 再 执行 git install 同样 就 解决问题 了 ，Go！ 附 快捷 复制 表     `Bash    go install github.com/ramya-rao-a/go-outline    go install github.com/acroca/go-symbols    go install golang.org/x/tools/cmd/guru    go install golang.org/x/tools/cmd/gorename    go install github.com/josharian/impl    go install github.com/rogpeppe/godef    go install github.com/sqs/goreturns    go install github.com/golang/lint/golint    go install github.com/cweill/gotests/gotests    go install github.com/ramya-rao-a/go-outline    go install github.com/acroca/go-symbols    go install golang.org/x/tools/cmd/guru    go install golang.org/x/tools/cmd/gorename    go install github.com/josharian/impl    go install github.com/rogpeppe/godef    go install github.com/sqs/goreturns    go install github.com/golang/lint/golint    go install github.com/cweill/gotests/gotests    `"},{"uri":"https://redblue.ga/spirits/develop/_index","tags":[],"content":"+++linktitle = \" 开发 \"title = \" 开发 的 那些 事 \"description = \" 奇技淫巧 \"layout=\"list\"+++"}]